    ##comienzo Template
  apiVersion: v1
  kind: Template
  metadata:
    name: crond-openshift-mvilche
    labels:
      template: crond-openshift-mvilche
      autor: "Martin_Fabrizzio_Vilche"
    annotations:
      openshift.io/display-name: "crond-openshift-mvilche"
      iconClass: "icon-github"
      description: >-
        Go Crond Task non root
        Martin Fabrizzio Vilche.
        https://github.com/mvilche.

  objects:


##################### CROND





  - apiVersion: v1
    data:
      tasks: |-
        # EJEMPLO DE TASKS
        SHELL=/bin/bash
        * * * * * 1001 bash -c "sleep 5 && id >> /tmp/test-1"
        #dia(*) hora(*) dia_del_mes(*) mes(*) dia_semana(*) id_usuario(1001) commando(sleep 5 && id >> /tmp/test-1)           
    kind: ConfigMap
    metadata:
      name: tasks


  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "crond-tasks"
      name: "crond-tasks"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: crond-tasks
        deploymentconfig: crond-tasks
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: crond-tasks
            deploymentconfig: crond-tasks
        spec:
          containers:
            - env:
                - name: TIMEZONE
                  value: America/Montevideo          
              image: "crond-tasks:latest"
              imagePullPolicy: Always
              name: crond-tasks
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              command:
              - bash
              - "-c"
              - |
                set -e
                echo '···································································································'
                echo 'MARTIN FABRIZZIO VILCHE - https://github.com/mvilche'
                echo '···································································································'
                APP_NAME=GO-CROND
                cat << EOF > /tmp/example_tasks
                # EJEMPLO DE TASKS
                SHELL=/bin/sh
                * * * * * 1001 sleep 5 && id >> /tmp/test-1
                #dia(*) hora(*) dia_del_mes(*) mes(*) dia_semana(*) id_usuario(1001) commando(sleep 5 && id >> /tmp/test-1)
                EOF
                cat /tmp/example_tasks
                echo '···································································································'
                echo 'AGREGUE SUS TAREAS PROGRAMADAS A /usr/share/crond/ CON EL FORMATO MOSTRADO EN EL EJEMPLO'
                echo '···································································································'
                if [ -z '$TIMEZONE' ]; then
                echo '···································································································'
                echo 'VARIABLE TIMEZONE NO SETEADA - INICIANDO CON VALORES POR DEFECTO'
                echo 'POSIBLES VALORES: America/Montevideo | America/El_Salvador'
                echo '···································································································'
                else
                echo '···································································································'
                echo 'TIMEZONE SETEADO ENCONTRADO: ' $TIMEZONE
                echo '···································································································'
                cat /usr/share/zoneinfo/$TIMEZONE > /etc/localtime && \
                echo $TIMEZONE > /etc/timezone
                fi
                echo 'INICIANDO $APP_NAME....'
                sleep 5s
                exec go-crond --allow-unprivileged --no-auto --verbose --include=/usr/share/crond                           
              volumeMounts:
                - mountPath: /usr/share/crond
                  name: tasks
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                defaultMode: 420
                items:
                  - key: tasks
                    path: tasks
                name: tasks
              name: tasks
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - crond-tasks
            from:
              kind: ImageStreamTag
              name: "crond-tasks:latest"
          type: ImageChange


  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: crond-tasks-go
        build: crond-tasks-go
      name: crond-tasks-go
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'crond-tasks-go:latest'
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: .
        git:
          ref: master
          uri: 'https://github.com/mvilche/crond-noroot.git'
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile-go
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: crond-tasks-go
      name: crond-tasks-go
    spec: {}




  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: crond-tasks
      name: crond-tasks
    spec:
      completionDeadlineSeconds: 1800
      output:
        to:
          kind: ImageStreamTag
          name: crond-tasks:latest
      source:
        type: Dockerfile
        dockerfile: |-
                FROM alpine:3.10
                USER root
                COPY go-crond /usr/bin/go-crond                
                RUN apk add --update --no-cache bash curl mailx shadow busybox-suid postgresql tzdata
                RUN adduser -u 1001 -D crond && rm -rf /etc/localtime && mkdir -p /usr/share/crond /tmp/logs && \
                touch /etc/localtime /etc/timezone && \
                chown 1001 -R /home/crond /etc/localtime /etc/timezone /usr/share/crond /usr/bin/go-crond /tmp/logs && \
                chgrp -R 0 /home/crond /etc/localtime /etc/timezone /usr/share/crond /usr/bin/go-crond /tmp/logs && \
                chmod +x /usr/bin/go-crond && \
                chmod -R g=u /home/crond /etc/localtime /etc/timezone /usr/share/crond /usr/bin/go-crond /tmp/logs
                USER 1001
        images:
        - from:
            kind: ImageStreamTag
            name: crond-tasks-go:latest
          paths:
          - sourcePath: /go/src/go-crond/go-crond
            destinationDir: "."
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: crond-tasks-go:latest
        type: Docker
      triggers:
      - type: "imageChange"
        imageChange:
          from:
            kind: "ImageStreamTag"
            name: "crond-tasks-go:latest"     

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: crond-tasks
      name: crond-tasks
    spec: {}